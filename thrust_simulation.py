"""
Main file
Performs thrust curve calculations and plotting
"""
"""
from os import write

from reportlab.graphics.transform import skewX
from shapely import LineString, Point, Polygon, BufferCapStyle, BufferJoinStyle, intersection, difference, \
    symmetric_difference, get_geometry, centroid, count_coordinates
from svgpathtools import svg2paths, disvg, parse_path, Line, Path, Arc, wsvg
from svgpathtools import path
import matplotlib
import shapely as sg
from collections import OrderedDict
import shapely.affinity as sa

from matplotlib import ticker, text
import matplotlib.animation as animation
from matplotlib.text import TextPath
from matplotlib.font_manager import FontProperties
from matplotlib.ticker import MultipleLocator
import matplotlib as mpl
"""

from thrust_curve_class import Shape, Plot, SVG
import math
import pandas as pd
import matplotlib.pyplot as plt
import subprocess
import time
from pathlib import Path
import argparse
import shutil
import multiprocessing as mp
import logging


class Config:
    """
    Stores global variables
    """
    a = 0.4 / 1000  #Regression coefficient
    nn = 0.37  #Exponential regression coefficient
    p = math.pi  #pi
    rho_ABS = 975  #Density of ABS plastic (FDM printed) (kg/m^3)
    m_fu = 1.40300287488  #Required mass of fuel  (kg)
    m_dot_ox = 1.279167  #Oxidizer mass flow rate (kg/s)
    L = 0.3302  #Length of fuel grain (arbitrary) (m)
    g = 9.8 #Gravitational constant
    isp = 236.4 #Initial specific impulse
    m_fu_adj = 1.2 * m_fu  #Required fuel grain mass with 20 percent margin
    f_t = 5.618304  #Total fire time, seconds
    t_0 = 0
    dt = 1 / 10  #Time step
    steps = math.floor(f_t / dt)


def get_area(polygon):
    """
    returns the area of a given polygon
    """
    return polygon.area

def get_length(polygon):
    """
    returns the perimeter of a given polygon
    """
    return polygon.length

def regression(shape):
    """
    returns regression rate of .intersect polygon
    """
    x=shape.intersect.area/1000000
    return Config.a * math.pow((Config.m_dot_ox / x), Config.nn)

def thrust(area):
    """
    Calculates thrust generated by burning a given volume of fuel

    Parameters
        area: delta area for a given time step (float)
    """
    m_dot_total = Config.m_dot_ox + (area * Config.L * Config.rho_ABS / Config.dt)
    thr1 = m_dot_total * Config.isp * Config.g
    return thr1

def write_csv(data_frame):
    """
    Writes a data frame to csv
    """
    data_frame.to_csv("circle_data")

def dxf_to_svg(dxf,svg):
    """
    Converts .dxf file to .svg file

    Parameters
        dxf: .dxf file to convert into svg (must include path and stem)
        svg: the name of the .svg file
    """
    dxf_path = Path(dxf)
    if dxf_path.exists():
        cmd = ["start","inkscape",dxf,"--export-type=svg","--export-filename="+svg]
        subprocess.Popen(cmd,shell=True)
    else:
        raise FileNotFoundError("File not found")
    while not Path(svg).exists():
        time.sleep(.1)

def file_args():
    """
    Method that parses command line arguments

    Returns the user input arguments for folders
    """
    parser = argparse.ArgumentParser(description='Import folder and export folder')
    parser.add_argument('-i', '--input-folder', type=str, help='Provide a folder containing DXF files', required=True)
    parser.add_argument('-o', '--output-folder', type=str, help='Provide a folder for simulation results', required=True)
    args = parser.parse_args()
    return args.input_folder, args.output_folder

def curve_sim(shape):
    """
    Runs thrust simulation on a given shape object

    Parameters
        shape: the shape object to simulate

    Returns
    data_list: list of sub-lists containing simulation results
    poly_list: list of polygon generated from running simulation
    """
    #Total number of steps
    time_lst = [0] #Time steps
    thr_lst = [0] #Newtons
    r_dot_lst = [0] #Meters per second
    poly_lst = [shape.intersect] #List of generated polygons
    #h_diam_lst = [4 * shape.area() / shape.length()] #Hydraulic diameter in mm
    area_lst = [0] #Area in mm^2
    per_lst = [shape.length()] #Inner perimeter in mm
    t_0 = time_lst[0]

    #Regression run for each time step
    for each in range(Config.steps):
        t_0 += Config.dt
        time_lst.append(t_0)
        a_1 = shape.intersect.area
        #h_d = shape.hydraulic_diameter()
        #h_diam_lst.append(h_d)
        r_dot = regression(shape)
        r_dot_lst.append(r_dot)
        offset = r_dot * Config.dt * 1000
        shape.buffer(offset=offset)
        poly_lst.append(shape.intersect)
        a_2 = shape.intersect.area
        delta_a = abs(a_2 - a_1)
        area_lst.append(delta_a)
        thr = thrust(delta_a / 1000000)
        thr_lst.append(thr)
        per_lst.append(shape.wetted_length())
    poly_lst.append(shape.boundary)
    data_list = [time_lst, r_dot_lst, per_lst, thr_lst,area_lst]
    return data_list, poly_lst

def create_df(data_list):
    """
    Creates pandas dataframe from a list of simulation results
    Cleans data frame

    Parameters
        data_list: list of sub-lists containing simulation results

    Returns the pandas dataframe
    """
    df = pd.DataFrame({"Thrust": data_list[3], "Regression": data_list[1], "D_Area": data_list[4],"Perimeter": data_list[2]})
    df.index = data_list[0]
    df = df.round(4)
    df = df.reset_index()

    # Round the values in the 'index' column
    df['index'] = df['index'].round(2)

    # Set the 'index' column back as the index
    df = df.set_index('index')
    return df

#for each in files:
def run(each):
    """
    Runs thrust simulation by calling necessary functions
    Sets up sub-folders for created files to be moved to
    """
    print(f"Processing: {each.name}")
    sub_folder = folder / each.stem
    sub_folder.mkdir(parents=True,exist_ok=True)
    dxf_source = each
    #print(sub_folder)
    dxf_final = sub_folder / each.name
    shutil.copy(str(dxf_source), str(dxf_final))
    svg = each.stem + ".svg"
    dxf_to_svg(dxf_final, svg)
    print(f"{each.name} converted")
    svg_loc = svg
    svg_des = sub_folder / svg

    #print(svg_des)
    shutil.move(str(svg_loc), str(svg_des))

    paths = SVG(svg_des)
    scaled_inner = paths.get_inner()
    shape = Shape(scaled_inner)
    data, poly_lst = curve_sim(shape)
    df = create_df(data)
    #print(df)
    csv_file = sub_folder / f"{each.stem}.csv"
    df.to_csv(csv_file)
    print("Data saved")
    #shutil.move(str(csv_file), str(sub_folder / csv_file.name))
    img_file = sub_folder / f"{each.stem}.png"
    plot = Plot(poly_lst, df)
    p_layout = [['A panel', 'A panel', 'B panel', 'C edge'],
                ['A panel', 'A panel', 'B panel', 'C edge']]
    fig, axes = plt.subplot_mosaic(p_layout, figsize=(9, 4))
    plot.plot_polygons(color="magma", color_2="plasma", ax=axes["A panel"], fig=fig)
    plot.plot_data("Thrust", title="Thrust", ax=axes["B panel"], x_label="Time (s)", y_label="Thrust (N)", fig=fig)
    plot.plot_data("Regression", title="Regression", ax=axes["C edge"], x_label="Time (s)", y_label="Regression (m/s)",
                   fig=fig)
    plt.tight_layout()

    fig.savefig(img_file, bbox_inches="tight")
    print("Chart saved")
    plt.close(fig)
    plot.animate(each.stem, sub_folder, save=True)
    print("Animation saved")
    print(f"{each.name} Processed")

if __name__ == "__main__":
    """
    Code block that is run 
    Sets up parallel processes
    """
    dxf, svg = file_args()

    folder = Path(svg)
    folder.mkdir(exist_ok=True)
    files = list(Path(dxf).glob("*"))

    with mp.Pool(processes=len(files)) as pool:
        pool.map(run, files)

    print("Process Complete :)")
