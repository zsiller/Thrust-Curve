"""
Main file
Performs thrust curve calculations and plotting
"""
from os import write

from reportlab.graphics.transform import skewX
from shapely import LineString, Point, Polygon, BufferCapStyle, BufferJoinStyle, intersection, difference, \
    symmetric_difference, get_geometry, centroid, count_coordinates
from svgpathtools import svg2paths, disvg, parse_path, Line, Path, Arc, wsvg
from svgpathtools import path
from thrust_curve_class import Shape, Plot, SVG
import math
import pandas as pd
import matplotlib
import shapely as sg
from collections import OrderedDict
import shapely.affinity as sa
import matplotlib.pyplot as plt
from matplotlib import ticker, text
import matplotlib.animation as animation
from matplotlib.text import TextPath
from matplotlib.font_manager import FontProperties
from matplotlib.ticker import MultipleLocator
import matplotlib as mpl

def get_area(polygon):
    """
    returns the area of a given polygon
    """
    return polygon.area

def get_length(polygon):
    """
    returns the perimeter of a given polygon
    """
    return polygon.length

def regression():
    """
    returns regression rate of .intersect polygon
    """
    x=shape.intersect.area/1000000
    return a * math.pow((m_dot_ox / x), nn)


def thrust(area):
    """
    Calculates thrust generated by burning a given volume of fuel

    Parameters
        area: delta area for a given time step (float)
    """
    m_dot_total = m_dot_ox + (area * L * rho_ABS / dt)
    thr1 = m_dot_total * isp * g
    return thr1

def write_csv(data_frame):
    data_frame.to_csv("circle_data")

def clean_df(data_frame):
    data_frame.index = time_lst
    data_frame = data_frame.round(4)
    data_frame = data_frame.reset_index()

    # Round the values in the 'index' column
    data_frame['index'] = data_frame['index'].round(2)

    # Set the 'index' column back as the index
    data_frame = data_frame.set_index('index')
    return data_frame

#file names
sw_svg_4 = "4_point_demo.svg"
sw_svg_5 = "5_point_fix.svg"
sw_svg_6 = "6_point_fix.svg"
sw_svg_circle = "4_p_fix.svg"

#Initialize SVG with file name
paths = SVG(sw_svg_circle)

#Check that this is the correct path otherwise shape initialization will not work
scaled_inner = paths.get_inner()

#Initializes Shape
shape = Shape(scaled_inner)

print((shape.boundary.area-shape.original.area)/1000000)
#Variables
a = 0.4 / 1000  #Regression coefficient
nn = 0.37  #Exponential regression coefficient
p = math.pi  #pi
rho_ABS = 975  #Density of ABS plastic (FDM printed) (kg/m^3)
m_fu = 1.40300287488  #Required mass of fuel  (kg)
m_dot_ox = 1.279167  #Oxidizer mass flow rate (kg/s)
L = 0.3302  #Length of fuel grain (arbitrary) (m)
g = 9.8 #Gravitational constant
isp = 236.4 #Initial specific impulse
m_fu_adj = 1.2 * m_fu  #Required fuel grain mass with 20 percent margin
f_t = 5.618304  #Total fire time, seconds
t_0 = 0
dt = 1 / 100  #Time step
steps = math.floor(f_t / dt) #Total number of steps
time_lst = [0] #Time steps
thr_lst = [0] #Newtons
r_dot_lst = [0] #Meters per second
poly_lst = [shape.intersect] #List of generated polygons
h_diam_lst = [4 * shape.area() / shape.length()] #Hydraulic diameter in mm
area_lst = [0] #Area in mm^2
per_lst = [shape.length()] #Inner perimeter in mm

#Regression run for each time step
for each in range(steps):
    t_0 += dt
    time_lst.append(t_0)
    a_1 = shape.intersect.area
    h_d = shape.hydraulic_diameter()
    h_diam_lst.append(h_d)
    r_dot = regression()
    r_dot_lst.append(r_dot)
    offset = r_dot * dt * 1000
    shape.buffer(offset=offset)
    poly_lst.append(shape.intersect)
    a_2 = shape.intersect.area
    delta_a = abs(a_2 - a_1)
    area_lst.append(delta_a)
    thr = thrust(delta_a / 1000000)
    thr_lst.append(thr)
    per_lst.append(shape.wetted_length())


df = pd.DataFrame({"Thrust": thr_lst, "Regression": r_dot_lst, "H_Diameter": h_diam_lst, "D_Area": area_lst, "Perimeter": per_lst})
#df.index = time_lst
poly_lst.append(shape.boundary)
c_d = clean_df(df)

print(df)
#print(f"Impulse {sum(thr_lst) * dt}")
#print(f"Average Thrust {sum(thr_lst) / len(thr_lst)}")
#print(f"Average Regression {sum(r_dot_lst) / len(r_dot_lst)}")
#print(pd.concat([df.head(5), df.tail(5)]))

plot = Plot(poly_lst, df)

p_layout = [['A panel', 'A panel', 'B panel','C edge'],
     ['A panel', 'A panel', 'B panel','C edge']]

fig, axes = plt.subplot_mosaic(p_layout, figsize=(9, 4))

plot.plot_polygons(color="magma",color_2="plasma",ax=axes["A panel"],fig=fig)

plot.plot_data("Thrust", title="Thrust", ax=axes["B panel"], x_label="Time (s)", y_label="Thrust (N)",fig=fig)
plot.plot_data("Regression",title="Regression",ax=axes["C edge"],x_label="Time (s)",y_label="Regression (m/s)",fig=fig)


plt.tight_layout()
plt.show()

plot.animate("circle_c","magma")

write_csv(c_d)